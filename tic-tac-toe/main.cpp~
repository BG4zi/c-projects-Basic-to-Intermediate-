#include <SDL2/SDL_render.h>
#include <SDL2/SDL_timer.h>

#include <iostream>
#include <SDL2/SDL.h>

#define SCREEN_WIDTH  600
#define SCREEN_HEIGHT 600
#define FPS 60

SDL_Color color_from_hex(Uint32 hex)
{
  SDL_Color color;
  color.r = (hex >> 16) & 0xFF;
  color.g = (hex >> 8) & 0xFF;
  color.b = hex & 0xFF;
  color.a = (hex >> 24) & 0xFF;
  return color;
}

void SDL_Destroy(SDL_Renderer *renderer, SDL_Window *window)
{
  SDL_DestroyRenderer(renderer);
  SDL_DestroyWindow(window);
  SDL_Quit();  
}

int main(int argc, char **argv)
{
  (void) argc;
  (void) argv;
  SDL_Event ev;

  SDL_Color BG_COLOR = color_from_hex(0xFF000000);
  SDL_Color LINE_COLOR = color_from_hex(0xFF00FF00);
  SDL_Color ICON_COLOR = color_from_hex(0xFF0000FF);
  
  if (SDL_Init(SDL_INIT_EVERYTHING) != 0){
    std::cerr << "SDL_Init Error: " << SDL_GetError() << std::endl;
    return 1;
  }
  SDL_Window *window = SDL_CreateWindow("Tic Tac Toe",
					SDL_WINDOWPOS_UNDEFINED,
					SDL_WINDOWPOS_UNDEFINED,
					SCREEN_WIDTH, SCREEN_HEIGHT,
					SDL_WINDOW_SHOWN);
  if (!window) {
    std::cerr << "ERROR: Could not initialize window: " << SDL_GetError() << "\n";
  }
	
  SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
  if (!renderer) {
    std::cerr << "ERROR: " << SDL_GetError() << "\n";
    return 1;
  }

  bool quit = false;

  int moves[9][2] ;
  int move[2] ;
  int count = 0;

while (!quit) {
    // Draw background and grid...
    SDL_SetRenderDrawColor(renderer, BG_COLOR.r, BG_COLOR.g, BG_COLOR.b, BG_COLOR.a);
    SDL_RenderClear(renderer);

    // Draw lines...
    SDL_SetRenderDrawColor(renderer, LINE_COLOR.r, LINE_COLOR.g, LINE_COLOR.b, LINE_COLOR.a);
    SDL_RenderDrawLine(renderer, SCREEN_WIDTH / 3, 0, SCREEN_WIDTH / 3, SCREEN_HEIGHT);
    SDL_RenderDrawLine(renderer, SCREEN_WIDTH / 3 * 2, 0, SCREEN_WIDTH / 3 * 2, SCREEN_HEIGHT);
    SDL_RenderDrawLine(renderer, 0, SCREEN_HEIGHT / 3, SCREEN_WIDTH, SCREEN_HEIGHT / 3);
    SDL_RenderDrawLine(renderer, 0, SCREEN_HEIGHT / 3 * 2, SCREEN_WIDTH, SCREEN_HEIGHT / 3 * 2);

    // Draw all moves
    SDL_SetRenderDrawColor(renderer, ICON_COLOR.r, ICON_COLOR.g, ICON_COLOR.b, ICON_COLOR.a);
    for (int i = 0; i < count; ++i) {
        int r = moves[i][0];
        int c = moves[i][1];
        if (i % 2 == 0) {
            // Draw X
            SDL_RenderDrawLine(renderer,
                               SCREEN_WIDTH / 3 * c,
                               SCREEN_HEIGHT / 3 * r,
                               SCREEN_WIDTH / 3 * (c + 1),
                               SCREEN_HEIGHT / 3 * (r + 1));
            SDL_RenderDrawLine(renderer,
                               SCREEN_WIDTH / 3 * (c + 1),
                               SCREEN_HEIGHT / 3 * r,
                               SCREEN_WIDTH / 3 * c,
                               SCREEN_HEIGHT / 3 * (r + 1));
        } else {
            // Optional: draw O
        }
    }

    SDL_RenderPresent(renderer);

    // Wait for next event
    if (SDL_WaitEvent(&ev)) {
        if (ev.type == SDL_QUIT) {
            quit = true;
        } else if (ev.type == SDL_KEYDOWN) {
            switch (ev.key.keysym.sym) {
                case SDLK_1: move[0] = 2; move[1] = 0; break;
                case SDLK_2: move[0] = 2; move[1] = 1; break;
                case SDLK_3: move[0] = 2; move[1] = 2; break;
                case SDLK_4: move[0] = 1; move[1] = 0; break;
                case SDLK_5: move[0] = 1; move[1] = 1; break;
                case SDLK_6: move[0] = 1; move[1] = 2; break;
                case SDLK_7: move[0] = 0; move[1] = 0; break;
                case SDLK_8: move[0] = 0; move[1] = 1; break;
                case SDLK_9: move[0] = 0; move[1] = 2; break;
                default: continue;
            }

            if (count < 9) {
                moves[count][0] = move[0];
                moves[count][1] = move[1];
                count++;
            }
        }
    }
}

 
  
  SDL_Destroy(renderer, window);
  return 0;
}
